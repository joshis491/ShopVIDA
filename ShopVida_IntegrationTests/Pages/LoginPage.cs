namespace FrameworkTests.Pages
{
    using FluentAssertions;
    using FrameworkTests.Utilities.Enums;
    using FrameworkTests.Utilities.Extensions;
    using FrameworkTests.Utilities.Helpers;
    using FrameworkTests.Utilities.Objects;
    using NUnit.Framework;
    using OpenQA.Selenium.Remote;
    using System;
    using System.Text.RegularExpressions;
    using TechTalk.SpecFlow;

    public partial class LoginPage : SeleniumReporter
    {
        public LoginPage(RemoteWebDriver driver, AppSettings appSettings)
            : base(appSettings) { }

        internal void SetUserLoginDetails(Table dataToAdd)
        {
            Regex regexUserEmail = new Regex(@"^([\w-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$");
            Regex regexPassword = new Regex(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]|.*[_()$@!#%^*?&])[A-Za-z\d_()$@!#%^*?&]{8,}$");
            loginEmail.InputKey(dataToAdd.Rows[0]["email"]);
            Assert.IsTrue(regexUserEmail.IsMatch(loginEmail.GetElementValueByAttribute("value")));
            loginPassword.InputKey(dataToAdd.Rows[0]["password"]);
            Assert.IsTrue(regexPassword.IsMatch(loginPassword.GetElementValueByAttribute("value")));
        }

        internal void ClickLoginButton(Table inputData)
        {
            Assert.IsTrue(loginButton.Text().Equals(inputData.Rows[0]["buttonName"]));
            loginButton.Click();
            Wait.Seconds(10);
        }

        internal void IsLoginPopupDisplayed()
        {
            loginPopup.UntilElementIsDisplayed(new TimeSpan(0, 0, 15));
            Assert.IsTrue(loginPopup.IsDisplayed(), "Popup/dialog box generated by URL is not displayed.");
        }

        internal void VerifyWelcomeHeaderTitle()
        {
            welcomeHeaderTitle.UntilElementIsDisplayed(new TimeSpan(0, 0, 15));
            Assert.AreEqual(Contents.WelcomeHeaderTitleText, welcomeHeaderTitle.GetElementValue(), "Welcome header title doesn't match");
        }

        internal void VerifyCurrentTab(string tabName)
        {
            Wait.Seconds(2);
            Assert.IsTrue(currentTab.GetElementValue().Equals(tabName), "Current tab is not as expected.");
        }

        public void CompareToastMessage(string textToCheck)
        {
            emailErrorMessage.UntilElementIsDisplayed(new TimeSpan(0, 0, 10));
            textToCheck.Should().NotBeEmpty("because we need to verify expected value");
            emailErrorMessage.GetElementValue().Should().NotBeEmpty("because we need to verify actual value");
            Assert.That(textToCheck, Is.EqualTo(emailErrorMessage.GetElementValue()), "Error message text is not as expected.");
        }

        internal void VerifyFailedLogin()
        {
            Assert.IsFalse(sideBarHeader.IsDisplayed(), "Side bar header text is not displayed.");
        }

        internal void VerifyReloginOptions()
        {
            Assert.Multiple(() =>
            {
                Assert.IsTrue(loginEmail.IsDisplayed(), "Input Email on login page is not displayed.");
                Assert.IsTrue(loginPassword.IsDisplayed(), "Input Password on login page is not displayed.");
            });
        }

        internal void ClearLoginCredentials()
        {
            loginEmail.BlankValue();
            loginPassword.BlankValue();
        }

        internal void CompareLoginErrorMessage()
        {
            Assert.Multiple(() =>
            {
                Assert.That(ErrorMessages.BlankValueError, Is.EqualTo(emailError.GetElementValue()), "Email error message doesn't match.");
                Assert.That(emailError.GetElementValue(), Is.Not.Null, "Email error text not found !!!");
                Assert.That(ErrorMessages.BlankValueError, Is.EqualTo(passwordError.GetElementValue()), "Password error message doesn't match.");
                Assert.That(passwordError.GetElementValue(), Is.Not.Null, "Password error text not found !!!");
            });
        }

        internal void ClickCloseIcon()
        {
            closeIcon.Click();
            Wait.Seconds(1);
        }

        internal void VerifyCreateProductText(string text)
        {
            Assert.AreEqual(text, createNewProductText.GetElementValue(), "Create New Product text is not as expected.");
        }

        internal void VerifyLoginPopupText(string text)
        {
            Assert.AreEqual(text, loginPopupText.GetElementValue(), "Login popup text after logout is not as expected.");
        }
    }
}