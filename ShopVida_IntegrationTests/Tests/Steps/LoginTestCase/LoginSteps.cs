namespace FrameworkTests.Tests.Steps.LoginTestCase
{
    using FrameworkTests.Pages;
    using FrameworkTests.Utilities.Helpers;
    using FrameworkTests.Utilities.Objects;
    using OpenQA.Selenium.Remote;
    using System;
    using TechTalk.SpecFlow;

    [Binding]
    public class LoginSteps : SeleniumReporter
    {
        public LoginSteps(RemoteWebDriver driver, AppSettings appSettings)
            : base(appSettings)
        {
            Driver = driver;
        }

        [Given(@"I launch the application")]
        internal void GivenUserNavigateToLoginPage()
        {
            Driver.Navigate().GoToUrl(_appSettings.Urls.LoginUrl);
            if (!DictionaryProperties.Details["ScenarioName"].Contains("mobile view"))
            {
                Driver.Manage().Window.Maximize();
            }
            Driver.Manage().Timeouts().ImplicitWait = TimeSpan.FromSeconds(5);
        }

        [When(@"I Click Log in Button")]
        public void WhenIClickLogInButton(Table table)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.ClickLoginButton(table);
        }

        [When(@"I entered valid login credentials")]
        internal void WhenUserEnteredLoginCredentials(Table table)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.SetUserLoginDetails(table);
        }

        [Then(@"I should be able to see login popup/dialog box generated by URL")]
        public void ThenIShouldBeAbleToSeePopupDialogBoxGeneratedByURL()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.IsLoginPopupDisplayed();
        }

        [Then(@"I verify the welcome header title text")]
        public void ThenIVerifyTheWelcomeHeaderTitleText()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyWelcomeHeaderTitle();
        }

        [Then(@"Verify current navigation tab should be ""(.*)""")]
        public void ThenVerifyCurrentNavigationTabShouldBe(string CurrentTab)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyCurrentTab(CurrentTab);
        }

        [When(@"I Entered Invalid Login Credentials")]
        public void WhenIEnteredInvalidLoginCredentials(Table table)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.SetUserLoginDetails(table);
        }

        [Then(@"Error message with text ""(.*)"" is displayed")]
        public void ThenToastMessageWithTextIsDisplayed(string text)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.CompareToastMessage(text);
        }

        [Then(@"Login should fail")]
        public void ThenLoginShouldFail()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyFailedLogin();
        }

        [Then(@"Relogin options should be available")]
        public void ThenReloginOptionShouldBeAvailable()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyReloginOptions();
        }

        [When(@"I clear the login credentials")]
        public void WhenIClearTheLoginCredentials()
        {
            LoginPage login = new LoginPage(Driver, _appSettings);
            login.ClearLoginCredentials();
        }

        [Then(@"I see login page error message")]
        public void ThenISeeErrorMessage()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.CompareLoginErrorMessage();
        }

        [When(@"I click close icon")]
        public void WhenIClickCloseIcon()
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.ClickCloseIcon();
        }

        [Then(@"I see ""(.*)"" text")]
        public void ThenISeeText(string text)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyCreateProductText(text);
        }

        [Then(@"Verify the text ""(.*)"" on login popup")]
        public void ThenVerifyTheTextOnLoginPopup(string text)
        {
            LoginPage loginPage = new LoginPage(Driver, _appSettings);
            loginPage.VerifyLoginPopupText(text);
        }
    }
}